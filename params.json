{"name":"Trusterd - HTTP/2 Web Server scripting with mruby","tagline":"","body":"# Trusterd HTTP/2 Web Server\r\n\r\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/matsumoto-r/trusterd?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n[![Build Status](https://travis-ci.org/matsumoto-r/trusterd.svg?branch=master)](https://travis-ci.org/matsumoto-r/trusterd)\r\n\r\nTrusterd is a high performance HTTP/2 Web Server scripting with [mruby](https://github.com/mruby/mruby) using [nghttp2](https://github.com/tatsuhiro-t/nghttp2) and [mruby-http2](https://github.com/matsumoto-r/mruby-http2). You can get HTTP/2 Web Server quickly which is high permance and customizable with mruby.\r\n\r\n## Benchmark\r\nPlease see [benchmark link](https://gist.github.com/matsumoto-r/9702123).\r\n\r\n## TODO\r\nThis is a very early version, please test and report errors. Wellcome pull-request.\r\n- more customizable Web server configration\r\n- Server Push\r\n\r\n## Quick install\r\n### Manual Build\r\n#### Download trusterd\r\n```\r\ngit clone https://github.com/matsumoto-r/trusterd.git\r\n```\r\n#### Build trusterd\r\n```bash\r\ncd trusterd\r\nsh build.sh\r\n```\r\nthen, output ``bin/trusterd``\r\n#### Write config ``conf/trusterd.conf.rb``\r\n```ruby\r\nSERVER_NAME = \"Trusterd\"\r\nSERVER_VERSION = \"0.0.1\"\r\nSERVER_DESCRIPTION = \"#{SERVER_NAME}/#{SERVER_VERSION}\"\r\n\r\nroot_dir = \"/usr/local/trusterd\"\r\n\r\ns = HTTP2::Server.new({\r\n\r\n  #\r\n  # required config\r\n  #\r\n\r\n  :port           => 8080,\r\n  :document_root  => \"#{root_dir}/htdocs\",\r\n  :server_name    => SERVER_DESCRIPTION,\r\n\r\n  # required when tls option is true.\r\n  # tls option is true by default.\r\n  #:key            => \"#{root_dir}/ssl/server.key\",\r\n  #:crt            => \"#{root_dir}/ssl/server.crt\",\r\n\r\n  # listen ip address\r\n  # default value is 0.0.0.0\r\n  # :server_host  => \"127.0.0.1\",\r\n\r\n  #\r\n  # optional config\r\n  #\r\n\r\n  # debug default: false\r\n  # :debug  =>  true,\r\n\r\n  # tls default: true\r\n  :tls => false,\r\n\r\n  # damone default: false\r\n  # :daemon => true,\r\n\r\n  # callback default: false\r\n  # :callback => true,\r\n\r\n  # connection_record defualt: true\r\n  # :connection_record => false,\r\n\r\n})\r\n\r\n#\r\n# when :callback option is true,\r\n#\r\n# s.set_map_to_strage_cb {\r\n#\r\n#   p \"callback bloack at set_map_to_strage_cb\"\r\n#   p s.request.uri\r\n#   p s.request.filename\r\n#\r\n#   # location setting\r\n#   if s.request.uri == \"/index.html\"\r\n#     s.request.filename = \"#{root_dir}/htdocs/hoge\"\r\n#   end\r\n#   p s.request.filename\r\n#\r\n#   # you can use regexp if you link regexp mrbgem.\r\n#   # Or, you can use KVS like mruby-redis or mruby-\r\n#   # vedis and so on.\r\n#\r\n#   # Experiment: reverse proxy config\r\n#   # reciev front end with HTTP/2 and proxy upstream server with HTTP/1\r\n#   # TODO: reciev/send headers transparently and support HTTP/2 at upstream\r\n#\r\n#   if s.request.uri =~ /^\\/upstream(\\/.*)/\r\n#     s.upstream_uri = $1\r\n#     s.upstream = “http://127.0.0.1“\r\n#   end\r\n#\r\n#   # dynamic content with mruby\r\n#   if s.request.filename =~ /^.*\\.rb$/\r\n#     s.enable_mruby\r\n#   end\r\n#\r\n#   # dynamic content with mruby sharing mrb_state\r\n#   if s.request.filename =~ /^.*\\_shared.rb$/\r\n#     s.enable_shared_mruby\r\n#   end\r\n#\r\n#\r\n# }\r\n\r\n# s.set_content_cb {\r\n#   s.rputs \"hello trusterd world from cb\"\r\n#   s.echo \"+ hello trusterd world from cb with \\n\"\r\n# }\r\n\r\n#\r\n# f = File.open \"#{root_dir}/logs/access.log\", \"a\"\r\n#\r\n# s.set_logging_cb {\r\n#\r\n#   p \"callback block after send response\"\r\n#   f.write \"#{s.conn.client_ip} #{Time.now} - #{s.r.uri} - #{s.r.filename}\\n\"\r\n#\r\n# }\r\n\r\ns.run\r\n```\r\n#### Create directory and files\r\n```bash\r\nmkdir -p /usr/local/trusterd/{bin,htdocs,ssl,conf}\r\ncp bin/trusterd /usr/local/trusterd/bin/.\r\ncp conf/trusterd.conf.rb /usr/local/trusterd/conf/.\r\necho hello trusterd world. > /usr/local/trusterd/htdocs/index.html\r\n```\r\n#### Run trusterd\r\n```bash\r\n/usr/local/trusterd/bin/trusterd /usr/local/trusterd/conf/trusterd.conf.rb\r\n```\r\n#### Check by nghttp\r\n[nghttp](https://github.com/tatsuhiro-t/nghttp2#nghttp---client) is a client tool for HTTP/2.\r\n```\r\n$ nghttp http://127.0.0.1:8080/index.html\r\nhello trusterd world.\r\n```\r\n\r\n----\r\n\r\n### Using Docker\r\n#### Using Docker image\r\n##### Pulling\r\n```\r\ndocker pull matsumotory/trusterd\r\n```\r\n##### Running\r\n```\r\ndocker run -d -p 8080:8080 matsumotory/trusterd\r\n```\r\n##### Access\r\n```\r\nnghttp -v http://127.0.0.1:8080/index.html\r\n```\r\n#### Docker Image Build\r\n##### Building\r\n```\r\ndocker build -t local/trusterd .\r\n```\r\n##### Runing\r\n```\r\ndocker run -d -p 8080:8080 local/trusterd\r\n```\r\n##### Access\r\n```\r\nnghttp -v http://127.0.0.1:8080/index.html\r\n```\r\n## Peformance\r\n### Machine\r\n\r\n- Ubuntu14.04 on VMWare \r\n- Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz 4core\r\n- Memory 8GB\r\n\r\n### Benchmark\r\n\r\n[h2load](https://github.com/tatsuhiro-t/nghttp2#benchmarking-tool) is a benchmark tool for HTTP/2.\r\n\r\nCurrent mruby-http2 commit: 9a98d6b1058cad866682fa51cf2d4110630bed63\r\n\r\n```\r\n$ h2load -w30 -W30 -n5000000 -c100 -m 100 http://127.0.0.1:8081/index.html\r\nstarting benchmark...\r\nspawning thread #0: 100 concurrent clients, 5000000 total requests\r\nprogress: 10% done\r\nprogress: 20% done\r\nprogress: 30% done\r\nprogress: 40% done\r\nprogress: 50% done\r\nprogress: 60% done\r\nprogress: 70% done\r\nprogress: 80% done\r\nprogress: 90% done\r\nprogress: 100% done\r\n\r\nfinished in 32 sec, 773 millisec and 214 microsec, 152563 req/s, 8643 kbytes/s\r\nrequests: 5000000 total, 5000000 started, 5000000 done, 5000000 succeeded, 0 failed, 0 errored\r\nstatus codes: 5000000 2xx, 0 3xx, 0 4xx, 0 5xx\r\ntraffic: 290084100 bytes total, 45081700 bytes headers, 110000000 bytes data\r\n```\r\n\r\nPlease see [details](https://gist.github.com/matsumoto-r/9702123).\r\n\r\n## Memory\r\n#### Startup\r\n```\r\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\nroot     62085  0.0  0.0  46668  2288 pts/4    S+   16:41   0:00  |   \\_ /usr/local/trusterd/bin/trusterd /usr/local/trusterd/conf/trusterd.conf.rb\r\n```\r\n#### After processing ten million request\r\n```\r\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\nroot     62085 63.3  0.0  49200  5144 pts/4    S+   16:41   0:47  |   \\_ /usr/local/trusterd/bin/trusterd /usr/local/trusterd/conf/trusterd.conf.rb\r\n```\r\n## License\r\nunder the MIT License:\r\n\r\n* http://www.opensource.org/licenses/mit-license.php\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}