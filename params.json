{"name":"Trusterd - HTTP/2 Web Server scripting with mruby","tagline":"","body":"# Trusterd HTTP/2 Web Server\r\nTrusterd is a high performance HTTP/2 Web Server scripting with [mruby](https://github.com/mruby/mruby) using [nghttp2](https://github.com/tatsuhiro-t/nghttp2) and [mruby-http2](https://github.com/matsumoto-r/mruby-http2). You can get HTTP/2 Web Server quickly which is high permance and customizable with mruby.\r\n\r\n## Benchmark\r\nPlease see [benchmark link](https://gist.github.com/matsumoto-r/9702123).\r\n\r\n## TODO\r\nThis is a very early version, please test and report errors. Wellcome pull-request.\r\n- more customizable Web server configration\r\n\r\n## Quick install\r\n#### Download trusterd\r\n```\r\ngit clone https://github.com/matsumoto-r/trusterd.git\r\n```\r\n#### Build trusterd\r\n```bash\r\ncd trusterd\r\nsh build.sh\r\n```\r\nthen, output ``bin/trusterd``\r\n#### Write config ``bin/trusterd.conf.rb``\r\n```ruby\r\nroot_dir = \"/usr/local/trusterd\"\r\n\r\ns = HTTP2::Server.new({\r\n  :port           => 8080,\r\n  #:key            => \"#{root_dir}/ssl/server.key\",\r\n  #:crt            => \"#{root_dir}/ssl/server.crt\",\r\n  :document_root  => \"#{root_dir}/htdocs\",\r\n  :server_name    => \"mruby-http2 server\",\r\n\r\n  #\r\n  # optional config\r\n  #\r\n\r\n  # debug default: false\r\n  # :debug  =>  true,\r\n\r\n  # tls default: true\r\n  :tls => false,\r\n\r\n  # damone default: false\r\n  # :daemon => true,\r\n\r\n  # callback default: false\r\n  # :callback => true,\r\n})\r\n\r\n#\r\n# when :callback option is true,\r\n#\r\n# s.set_map_to_strage_cb {\r\n#\r\n#   p \"callback bloack at set_map_to_strage_cb\"\r\n#   p s.request.uri\r\n#   p s.request.filename\r\n#\r\n#   # location setting\r\n#   if s.request.uri == \"/index.html\"\r\n#     s.request.filename = \"#{root_dir}/htdocs/hoge\"\r\n#   end\r\n#   p s.request.filename\r\n#\r\n#   # you can use regexp if you link regexp mrbgem.\r\n#   # Or, you can use KVS like mruby-redis or mruby-\r\n#   # vedis and so on. \r\n#\r\n# }\r\n\r\n#s.set_map_to_strage_cb {\r\n#  p \"callback bloack at set_map_to_strage_cb\"\r\n#  p \"rquest uri: #{s.request.uri}\"\r\n#}\r\n\r\ns.run\r\n```\r\n#### Create directory and files\r\n```bash\r\nmkdir -p /usr/local/trusterd/{bin,htdocs,ssl,conf}\r\ncp bin/trusterd /usr/local/trusterd/bin/.\r\ncp bin/trusterd.conf.rb /usr/local/trusterd/conf/.\r\necho hello trusterd world. > /usr/local/trusterd/htdocs/index.html\r\n```\r\n#### Run trusterd\r\n```bash\r\n/usr/local/trusterd/bin/trusterd /usr/local/trusterd/conf/trusterd.conf.rb\r\n```\r\n#### Check by nghttp\r\n[nghttp](https://github.com/tatsuhiro-t/nghttp2#nghttp---client) is a client tool for HTTP/2.\r\n```\r\n$ nghttp http://127.0.0.1:8080/index.html\r\nhello trusterd world.\r\n```\r\n## Peformance\r\n#####Max performance(2014/03/24): 284681 req/s\r\n[h2load](https://github.com/tatsuhiro-t/nghttp2#benchmarking-tool) is a benchmark tool for HTTP/2.\r\n```\r\n$ h2load -n1000000 -c100 -m100 http://127.0.0.1:8080/index.html\r\nstarting benchmark...\r\nspawning thread #0: 100 concurrent clients, 1000000 total requests\r\nprogress: 10% done\r\nprogress: 20% done\r\nprogress: 30% done\r\nprogress: 40% done\r\nprogress: 50% done\r\nprogress: 60% done\r\nprogress: 70% done\r\nprogress: 80% done\r\nprogress: 90% done\r\nprogress: 100% done\r\n\r\nfinished in 3 sec, 512 millisec and 701 microsec, 284681 req/s, 6950 kbytes/s\r\nrequests: 1000000 total, 1000000 started, 1000000 done, 1000000 succeeded, 0 failed, 0 errored\r\nstatus codes: 1000000 2xx, 0 3xx, 0 4xx, 0 5xx\r\ntraffic: 49003700 bytes total, 1600 bytes headers, 25000000 bytes data\r\n\r\n```\r\nPlease see [details](https://gist.github.com/matsumoto-r/9702123).\r\n## License\r\nunder the MIT License:\r\n\r\n* http://www.opensource.org/licenses/mit-license.php\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}