{"name":"Trusterd - HTTP/2 Web Server scripting with mruby","tagline":"","body":"# Trusterd HTTP/2 Web Server\r\n\r\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/trusterd/trusterd?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n[![Build Status](https://travis-ci.org/trusterd/trusterd.svg?branch=master)](https://travis-ci.org/trusterd/trusterd)\r\n[![wercker status](https://app.wercker.com/status/d389a8a05b263e469d51f40d532af04f/s \"wercker status\")](https://app.wercker.com/project/bykey/d389a8a05b263e469d51f40d532af04f)\r\n\r\n[Trusterd](https://github.com/trusterd/trusterd) is a high performance HTTP/2 Web Server scripting with [mruby](https://github.com/mruby/mruby) using [nghttp2](https://github.com/tatsuhiro-t/nghttp2) and [mruby-http2](https://github.com/trusterd/mruby-http2). You can get HTTP/2 Web Server quickly which is high permance and customizable with mruby.\r\n\r\n## TODO\r\nThis is a very early version, please test and report errors. Wellcome pull-request.\r\n- more customizable Web server configration\r\n- Server Push\r\n\r\n## Requirements\r\n\r\n- [nghttp2 Requirements](https://github.com/tatsuhiro-t/nghttp2#requirements)\r\n- [mruby-http2 Requirements](https://github.com/trusterd/mruby-http2/blob/master/mrbgem.rake#L6)\r\n- Trusterd Requirements\r\n  - libjemalloc-dev\r\n  - [qrintf-gcc](https://github.com/h2o/qrintf)\r\n  - If you don't have jemalloc and qrintf-gcc, comment out these lines on [build_config.rb](https://github.com/trusterd/trusterd/blob/master/build_config.rb#L34-L62)\r\n- If you use prefork mode, linux kernel need to support `SO_REUSEPORT`.\r\n\r\nAfter reading [.travis.yml](https://github.com/trusterd/trusterd/blob/master/.travis.yml), you might easy to understand the install\r\n\r\n## Quick install\r\n### Manual Build\r\n#### Install qrintf\r\nPlease see [qrintf-gcc](https://github.com/h2o/qrintf)\r\n\r\n#### Install jemalloc\r\n##### Ubuntu\r\n```\r\nsudo apt-get install libjemalloc-dev\r\n```\r\n\r\n#### Download trusterd\r\n```\r\ngit clone https://github.com/trusterd/trusterd.git\r\ncd trusterd\r\n```\r\n#### Build trusterd\r\n```bash\r\nmake\r\n```\r\n#### Install\r\n```bash\r\nmake install INSTALL_PREFIX=/usr/local/trusterd\r\n```\r\n#### Write config ``$(INSTALL_PREFIX)/conf/trusterd.conf.rb``\r\n```ruby\r\nSERVER_NAME = \"Trusterd\"\r\nSERVER_VERSION = \"0.0.1\"\r\nSERVER_DESCRIPTION = \"#{SERVER_NAME}/#{SERVER_VERSION}\"\r\n\r\nroot_dir = \"/usr/local/trusterd\"\r\n\r\ns = HTTP2::Server.new({\r\n\r\n  #\r\n  # required config\r\n  #\r\n\r\n  :port           => 8080,\r\n  :document_root  => \"#{root_dir}/htdocs\",\r\n  :server_name    => SERVER_DESCRIPTION,\r\n\r\n  # support prefork only when linux kernel supports SO_REUSEPORT\r\n  # :worker         => 4,\r\n\r\n  # detect cpu thread automatically\r\n  # If don't support SO_REUSEPORT of Linux, the number of worker is 0\r\n  :worker         => \"auto\",\r\n\r\n  # required when tls option is true.\r\n  # tls option is true by default.\r\n  #:key            => \"#{root_dir}/ssl/server.key\",\r\n  #:crt            => \"#{root_dir}/ssl/server.crt\",\r\n\r\n  # listen ip address\r\n  # default value is 0.0.0.0\r\n  # :server_host  => \"127.0.0.1\",\r\n\r\n  #\r\n  # optional config\r\n  #\r\n\r\n  # debug default: false\r\n  # :debug  =>  true,\r\n\r\n  # tls default: true\r\n  :tls => false,\r\n\r\n  # damone default: false\r\n  # :daemon => true,\r\n\r\n  # callback default: false\r\n  # :callback => true,\r\n\r\n  # connection_record defualt: true\r\n  # :connection_record => false,\r\n\r\n})\r\n\r\n#\r\n# when :callback option is true,\r\n#\r\n# s.set_map_to_strage_cb {\r\n#\r\n#   p \"callback bloack at set_map_to_strage_cb\"\r\n#   p s.request.uri\r\n#   p s.request.filename\r\n#\r\n#   # location setting\r\n#   if s.request.uri == \"/index.html\"\r\n#     s.request.filename = \"#{root_dir}/htdocs/hoge\"\r\n#   end\r\n#   p s.request.filename\r\n#\r\n#   # you can use regexp if you link regexp mrbgem.\r\n#   # Or, you can use KVS like mruby-redis or mruby-\r\n#   # vedis and so on.\r\n#\r\n#   # Experiment: reverse proxy config\r\n#   # reciev front end with HTTP/2 and proxy upstream server with HTTP/1\r\n#   # TODO: reciev/send headers transparently and support HTTP/2 at upstream\r\n#\r\n#   if s.request.uri =~ /^\\/upstream(\\/.*)/\r\n#     s.upstream_uri = $1\r\n#     s.upstream = “http://127.0.0.1“\r\n#   end\r\n#\r\n#   # dynamic content with mruby\r\n#   if s.request.filename =~ /^.*\\.rb$/\r\n#     s.enable_mruby\r\n#   end\r\n#\r\n#   # dynamic content with mruby sharing mrb_state\r\n#   if s.request.filename =~ /^.*\\_shared.rb$/\r\n#     s.enable_shared_mruby\r\n#   end\r\n#\r\n#\r\n# }\r\n\r\n# s.set_content_cb {\r\n#   s.rputs \"hello trusterd world from cb\"\r\n#   s.echo \"+ hello trusterd world from cb with \\n\"\r\n# }\r\n\r\n#\r\n# f = File.open \"#{root_dir}/logs/access.log\", \"a\"\r\n#\r\n# s.set_logging_cb {\r\n#\r\n#   p \"callback block after send response\"\r\n#\r\n#   f.write \"client_ip:'#{s.conn.client_ip}' date:'#{s.r.date}' status:#{s.r.status} content_length:#{s.r.content_length} uri:'#{s.r.uri}' filename:'#{s.r.filename}' user_agent:'#{s.r.user_agent}'\\n\"\r\n#\r\n# }\r\n\r\ns.run\r\n```\r\n#### Run trusterd\r\n```bash\r\nmake start INSTALL_PREFIX=/usr/local/trusterd\r\n```\r\n\r\nor\r\n\r\n```bash\r\n$(INSTALL_PREFIX)/bin/trusterd $(INSTALL_PREFIX)/conf/trusterd.conf.rb\r\n```\r\n\r\n#### Clean\r\n```\r\nmake clean\r\n```\r\n#### Check by nghttp\r\n[nghttp](https://github.com/tatsuhiro-t/nghttp2#nghttp---client) is a client tool for HTTP/2.\r\n```\r\n$ nghttp http://127.0.0.1:8080/index.html\r\nhello trusterd world.\r\n```\r\n\r\n----\r\n\r\n### Using Docker\r\n#### Using Docker image\r\n##### Pulling\r\n```\r\ndocker pull matsumotory/trusterd\r\n```\r\n##### Running\r\n```\r\ndocker run -d -p 8080:8080 matsumotory/trusterd\r\n```\r\n##### Access\r\n```\r\nnghttp -v http://127.0.0.1:8080/index.html\r\n```\r\n#### Docker Image Build\r\n##### Building\r\n```\r\ndocker build -t local/trusterd .\r\n```\r\n##### Runing\r\n```\r\ndocker run -d -p 8080:8080 local/trusterd\r\n```\r\n##### Access\r\n```\r\nnghttp -v http://127.0.0.1:8080/index.html\r\n```\r\n## Peformance\r\n### Machine\r\n\r\n- Ubuntu14.04 on VMWare\r\n- Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz 4core\r\n- Memory 8GB\r\n\r\n### Config\r\n#### trusterd.conf.rb\r\n```ruby\r\nSERVER_NAME = \"Trusterd\"\r\nSERVER_VERSION = \"0.0.1\"\r\nSERVER_DESCRIPTION = \"#{SERVER_NAME}/#{SERVER_VERSION}\"\r\n\r\nroot_dir = \"/usr/local/trusterd\"\r\n\r\ns = HTTP2::Server.new({\r\n\r\n  :port           => 8081,\r\n  :document_root  => \"#{root_dir}/htdocs\",\r\n  :server_name    => SERVER_DESCRIPTION,\r\n  :tls            => false,\r\n\r\n})\r\n\r\ns.run\r\n```\r\n\r\n### Benchmarks\r\n\r\n[h2load](https://github.com/tatsuhiro-t/nghttp2#benchmarking-tool) is a benchmark tool for HTTP/2.\r\n\r\n- use [h2o/h2o benchmark parameter](https://github.com/h2o/h2o#benchmarks)\r\n\r\n#### 4 worker mode benchmark demo\r\n500,000 reqeuat/sec is very fater!!\r\n![](https://raw.githubusercontent.com/trusterd/trusterd/master/images/bench.png)\r\n\r\n#### 4 worker mode cpu usage by top demo\r\ntrusterd worker processes use cpu resources of full core mostly.\r\n![](https://raw.githubusercontent.com/trusterd/trusterd/master/images/top.png)\r\n\r\n#### HTTP/2\r\n\r\n|Server \\ size of content|6 bytes|4,096 bytes|\r\n|------------------------|------:|----------:|\r\n|nghttpd ([nghttpd @ a08ce38](https://github.com/tatsuhiro-t/nghttp2/)) single thread|148,841|73,812|\r\n|nghttpd ([nghttpd @ a08ce38](https://github.com/tatsuhiro-t/nghttp2/)) multi thread|347,152|104,244|\r\n|tiny-nghttpd ([nghttpd @ a08ce38](https://github.com/tatsuhiro-t/nghttp2/)) single thread|190,223|82,047|\r\n|[Trusterd @ 2432cc5](https://github.com/trusterd/trusterd) single process|204,769|92,068|\r\n|[Trusterd @ 2432cc5](https://github.com/trusterd/trusterd) multi process|509,059| 134,542 |\r\n|[H2O @ 529be4e](https://github.com/h2o/h2o) single thread          |216,453|     112,356|\r\n|[H2O @ 529be4e](https://github.com/h2o/h2o) multi thread          |379,623|     146,343|\r\n\r\n`h2load -c 500 -m 100 -n 2000000`\r\n\r\n\r\n#### Ref: HTTP/1.1 on same benchmark environment\r\n\r\n|Server \\ size of content|6 bytes|4,096 bytes|\r\n|------------------------|------:|----------:|\r\n|nginx single process|21,708| 22,366 |\r\n|nginx multi process|67,349| 56,203 |\r\n\r\n`weighttp -k -c 500 -n 200000`\r\n\r\n\r\n## Memory\r\n#### Startup\r\n```\r\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\nroot     62085  0.0  0.0  46668  2288 pts/4    S+   16:41   0:00  |   \\_ /usr/local/trusterd/bin/trusterd /usr/local/trusterd/conf/trusterd.conf.rb\r\n```\r\n#### After processing ten million request\r\n```\r\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\nroot     62085 63.3  0.0  49200  5144 pts/4    S+   16:41   0:47  |   \\_ /usr/local/trusterd/bin/trusterd /usr/local/trusterd/conf/trusterd.conf.rb\r\n```\r\n## License\r\nunder the MIT License:\r\n\r\n* http://www.opensource.org/licenses/mit-license.php\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}